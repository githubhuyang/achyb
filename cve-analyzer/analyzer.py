#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" KACV Analysis and Plot """

import os
import re
import sys
import copy
import shutil
import numpy as np
import matplotlib.pyplot as plt
import pickle
import argparse

from filter import *
from cvedb import *
from kv import *
from kfp import *
from gitif import *
from const import *


def ext_info(cveinfo_lst):
    '''extract extra cve information'''
    for cveinfo in cveinfo_lst:
        s = cveinfo["summary"]
        
        cveinfo["vul_class"] = []

        sl = s.lower()
        for word in get_word_lst():
            if word in sl:
                cveinfo["vul_class"].append(word)

        v = get_kv_from_cveinfo(cveinfo)
        if v is None:
            v = get_kv_from_str(s)
        
        cveinfo["kernel_version"] = v
        
        for link in cveinfo["references"]:
            if "git.kernel.org" in link and ("torvalds" in link or "cgit/linux/kernel" in link):
                commitid = get_commitid(link)

                diff = getdiff(commitid)
                if diff is None:
                    # print("git diff none", cveinfo["id"])
                    continue
                cveinfo["file_path"] = get_kfp_from_diff(diff)

                cveinfo["commitid"] = commitid
                cveinfo["diff"] = diff
                break

        if "diff" not in cveinfo.keys():
            for link in cveinfo["references"]:
                if "patchwork.ozlabs.org/patch" in link:
                    diff = git_diff_by_link(link)

                    if diff is None or len(diff.strip()) == 0:
                        # print("curl diff none", cveinfo["id"])
                        continue
                    cveinfo["file_path"] = get_kfp_from_diff(diff)
                    
                    match = re.search("([a-z0-9]{40})", diff)
                    if match:
                        e_lst = match.groups()
                        cveinfo["commitid"] = str(e_lst[0])
                        cveinfo["diff"] = diff
                    else:
                        cveinfo["commitid"] = None
                        cveinfo["diff"] = diff
        if "diff" not in cveinfo.keys():
            if cveinfo["id"] == "CVE-2009-3621":
                link = "https://lore.kernel.org/patchwork/patch/175013/raw/"
                diff = git_diff_by_link(link)
                if diff is None or len(diff.strip()) == 0:
                    cveinfo["commitid"] = None
                    cveinfo["diff"] = diff

        if "diff" not in cveinfo.keys():
            cveinfo["diff"] = None
        if "file_path" not in cveinfo:
            cveinfo["file_path"] = None


def download_exploits(cveinfo_lst):
    '''download exploits from exploit-db.com'''
    cnt_found = 0
    cnt_unfound = 0

    for cveinfo in cveinfo_lst:
        has_exp = False
        for link in cveinfo["references"]:
            if "exploit-db.com" in link:
                if link[-1] == "/":
                    link = link[:-1]

                exp_id = link.split("/")[-1]
                download_link = "https://www.exploit-db.com/download/" + exp_id

                dir_path = os.getcwd() + "/exploits/auto/" + cveinfo["id"]
                if not os.path.isdir(dir_path):
                    os.makedirs(dir_path)

                cmd = "curl " + download_link + " > " + dir_path + "/exploit.c"
                os.system(cmd)

                with open(dir_path + "/exploit.c", "r") as f:
                    exp = f.read()

                if "<html" in exp:
                    shutil.rmtree(dir_path)
                else:
                    has_exp = True
                    break
                    
            if "openwall.com" in link:
                dir_path = os.getcwd() + "/exploits/auto/" + cveinfo["id"]
                if not os.path.isdir(dir_path):
                    os.makedirs(dir_path)

                cmd = "curl " + link + " > " + dir_path + "/exploit.c"
                os.system(cmd)

                with open(dir_path + "/exploit.c", "r") as f:
                    exp = f.read()

                if "#include" in exp:
                    has_exp = True
                    break
                else:
                    shutil.rmtree(dir_path)
                    
        if has_exp:
            # print(cveinfo["id"], "found")
            cnt_found += 1
        else:
            # print(cveinfo["id"], "not found")
            cnt_unfound += 1


def secwiki_exploits(cveinfo_lst):
    '''download exploits from secwiki'''
    secwiki_ori_path = os.getcwd() + "/exploits/secwiki-ori"
    secwiki_path = os.getcwd() + "/exploits/secwiki"
    
    for year in os.listdir(secwiki_ori_path):
        for name in os.listdir(secwiki_ori_path + "/" + year):
            if any(name == cveinfo["id"] for cveinfo in cveinfo_lst):
                # print(year + "/" + name)
                p = secwiki_ori_path + "/" + year + "/" + name
                os.system("cp -rf " + p + " " + secwiki_path)

    
def year_plot(cveinfo_lst):
    '''analyze cve counting for each year'''

    print("analyze cve cnt:")
    
    year_lst = []
    for cveinfo in cveinfo_lst:
        year = int(cveinfo["Published"].split("-")[0])
        year_lst.append(year)
    
    width = 0.5
    x = [i for i in range(2010, 2021)]
    y = [year_lst.count(i) for i in range(2010, 2021)]
    
    # print(x)
    # print(y)
    # print(year_lst)
    plt.figure(figsize=(7, 6))
   
    plt.bar(x, y, width, color="orange", alpha=0.6, edgecolor='black')

    plt.xticks(np.arange(2009, 2022, 1))
    plt.xticks(rotation=45)

    plt.yticks(np.arange(0, 20, 2))
    # plt.hist(year_lst, color = 'blue', edgecolor = 'black', bins = [i for i in range(2010, 2021)])
    plt.ylabel('# KACV')
    plt.xlabel('Year')
    
    # plt.grid(color='0.85')

    plt.savefig('fig/study1.pdf')
    plt.clf()

    print("generate fig/study1.pdf")
    print("done")
    print()


def severity_plot(cveinfo_lst):
    '''analyze CVE severity score in CVSS 3.0'''

    print("analyze cve severity:")
    cl = 0
    cm = 0
    ch = 0
    cc = 0
    for cveinfo in cveinfo_lst:
        score = cveinfo["cvss"]
        score = float(score)

        if score <= 3.9:
        	cl += 1
        elif score <= 6.9:
        	cm += 1
        elif score <= 8.9:
        	ch += 1
        else:
        	cc += 1

    
    labels = ["Low", "Medium", "High", "Critical"]
    sizes = [cl, cm, ch, cc]
    

    # Plot
    plt.figure(figsize=(7, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=False, startangle=90, colors=["green", "blue", "orange", "red"], textprops={'fontsize': 17}, wedgeprops={'alpha':0.6})

    plt.axis('equal')

    plt.savefig('fig/study3.pdf')
    plt.clf()

    print("generate fig/study3.pdf")
    print("done")
    print()


def summary_classify(cveinfo_lst):
    '''analyze CVE security threats'''

    privilege_lst = ["gain privileges", "gain group privileges", 
                     "obtain root access", "gain root privileges",
                     "send an arbitrary signal", "cve-2016-8655",
                     "escalate privileges", "allow local users to conduct unauthorized activities",
                     "allows local users to create", "allows local users to reset",
                     "allows local users to leverage", "cause clients to use server-specified uid",
                     "allows local users to spoof", "be leveraged by local attackers to map ", "set incorrect permissions"] # "access"
    dos_lst = ["denial of service", "dos", "crash", "denial-of-service"]
    ce_lst = ["execute arbitrary code", "allow attackers to trigger"]
    info_lst = ["information exposure", "obtain sensitive information", 
                "learn the memory layout", "allows local users to read",
                "related to decoding", "allows local users to discover",
                "leaking",  "obtain potentially sensitive information"]
    bypass_lst = ["bypass", "lacks a check", "local users to defeat", "lacks acl support", "omitted an access-control check", "do not validate", "because of a lack of", "can escape"]
    memory_lst = ["use-after-free", "out-of-bounds write", "use after free"]
    
    pri_n = 0
    dos_n = 0
    ce_n = 0
    info_n = 0
    bypass_n = 0
    memory_n = 0

    unknown = []
    for cveinfo in cveinfo_lst:
        s = cveinfo["summary"].lower()
        if any(word in s for word in privilege_lst):
            pri_n += 1
        elif any(word in s for word in dos_lst):
            dos_n += 1
        elif any(word in s for word in ce_lst):
            ce_n += 1
        elif any(word in s for word in info_lst):
            info_n += 1
        elif any(word in s for word in bypass_lst):
            bypass_n += 1
        elif any(word in s for word in memory_lst):
            memory_n += 1
        else:
            unknown.append(cveinfo)

    labels = ['Bypass', ' Privilege\nEscalation', 'DoS', 'Information\n  Leakage', 'Others']
    sizes = [bypass_n, pri_n, dos_n, info_n, memory_n+ce_n]
    
    #explode = (0.1, 0, 0, 0)  # explode 1st slice

    # Plot
    plt.figure(figsize=(7, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=False, startangle=90, colors=["red", "orange", "green", "blue", "purple"], textprops={'fontsize': 15}, wedgeprops={'alpha':0.6})
    
    plt.axis('equal')
    plt.savefig('fig/study4.pdf')
    plt.clf()

    if len(unknown) > 0:
        print("Unknown:")
        for cveinfo in unknown:
            print(cveinfo["id"], cveinfo["kernel_version"])


def diff_classify(cveinfo_lst, from_file=True, to_file=True):
    '''analyze CVE categories (KACV-M, KACV-I and KACV-S)'''

    diff_map = {}

    json_path = os.getcwd() + "/diff_classify/dc.json"
    if from_file and os.path.isfile(json_path):
        # print("load json:")
        with open(json_path, "r") as f:
            dc_str = f.read()
        diff_map = json.loads(dc_str)
    
    tmp_map = {}
    for cveid, c in diff_map.items():
        if any(cveid == cveinfo["id"] for cveinfo in cveinfo_lst):
             tmp_map[cveid] = c
    diff_map = tmp_map
            

    curr_idx = 0
    for cveinfo in cveinfo_lst:
        cveid = cveinfo["id"]
        if cveid in diff_map.keys():
            curr_idx += 1
            continue

        diff = cveinfo["diff"]
        print(diff)
        print()
        print("Desc:")
        print(cveinfo["summary"])

        choice = -1
        while(True):
            print(curr_idx, "/", len(cveinfo_lst), "processed")
            print("CVE:", cveinfo["id"])
            print("Choice [1] KACV-M\n" + 
                  "       [2] KACV-I\n" +
                  "       [3] Others\n")
            choice = int(input("Your choice is [1-3]: "))

            if choice not in [1, 2, 3]:
                print("illegal choice, please input legal choice.")
            else:
                break

        diff_map[cveid] = choice
        curr_idx += 1

        if to_file:
            dc_str = json.dumps(diff_map)
            with open(json_path, "w") as f:
                f.write(dc_str)

    rev_diff_map = {}
    for cveid, choice in diff_map.items():
        if choice not in rev_diff_map.keys():
            rev_diff_map[choice] = []
        rev_diff_map[choice].append(cveid)

    for choice in sorted(list(rev_diff_map.keys())):
        cveid_lst = rev_diff_map[choice]
        # print(choice, len(cveid_lst))
    
    kacv_m_i_cveinfo_lst = []
    kacv_id_lst = rev_diff_map[1] + rev_diff_map[2]
    for cveinfo in cveinfo_lst:
        if cveinfo["id"] in kacv_id_lst:
            kacv_m_i_cveinfo_lst.append(cveinfo)

    return kacv_m_i_cveinfo_lst, rev_diff_map


def subsystem_classify(cveinfo_lst):
    '''analyze subsystems with KACVs'''

    print("analyze subsystems with KACVs:")
    subsys_lst = ["fs", "net", "kernel", "security"]
    mm_arch_lst = ["drivers", "mm", "arch"]

    cnt_map = {}
    for subsys in subsys_lst:
        cnt_map[subsys] = 0
    cnt_map["drivers+mm+arch"] = 0

    for cveinfo in cveinfo_lst:

        # special cases
        if cveinfo["id"] == "CVE-2009-2695":
            cnt_map["security"] += 1
            continue

        kfp_lst = cveinfo["file_path"]
        
        is_clf = False
        for subsys in subsys_lst:
            if any(subsys == kfp.split("/")[0] for kfp in kfp_lst):
                is_clf = True
                cnt_map[subsys] += 1
                break
                
        if not is_clf:
            for subsys in mm_arch_lst:
                if any(subsys == kfp.split("/")[0] for kfp in kfp_lst):
                    is_clf = True
                    cnt_map["drivers+mm+arch"] += 1
                    break

        if not is_clf:
            print("not clf:", cveinfo["id"], kfp_lst)

    #for subsys in subsys_lst:
    #    print(subsys, cnt_map[subsys])
    #print("drivers+mm+arch", cnt_map["drivers+mm+arch"])

    labels = subsys_lst
    sizes = [cnt_map[subsys] for subsys in subsys_lst]

    labels.append("drivers")
    sizes.append(cnt_map["drivers+mm+arch"])

    for i in range(len(labels)-1):
        for j in range(i+1, len(labels)):
            if sizes[i] < sizes[j]:
                sizes[i], sizes[j] = sizes[j], sizes[i]
                labels[i], labels[j] = labels[j], labels[i]

    #explode = (0.1, 0, 0, 0)  # explode 1st slice

    # Plot
    plt.figure(figsize=(7, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=False, startangle=90, colors=["red", "orange", "green", "blue", "purple"], textprops={'fontsize': 15}, wedgeprops={'alpha':0.6})

    plt.axis('equal')
    plt.savefig('fig/other1.pdf')
    plt.clf()

    print("generate fig/other1.pdf")
    print("done")
    print()


def collect_cve_info():
    '''collect cve info via cve-search tool (assume the cve-search has been deployed in local environment)'''

    print("search cves via the cve-search tool:")
    cve_lst = cvesearch()
    cve_linux_lst = cvesearch_linux()
    # print("Acess Control / Full Kernel", len(cve_lst)/len(cve_linux_lst))

    cveinfo_lst = getcveinfos(cve_lst)

    ext_info(cveinfo_lst)
    
    cveinfo_lst = remove_nokv_cases(cveinfo_lst)
    cveinfo_lst = remove_low_kv_cases(cveinfo_lst)
    cveinfo_lst = remove_vendor_cases(cveinfo_lst)

    cveinfo_lst = remove_nodiff_cases(cveinfo_lst)
    cveinfo_lst = remove_nokfp_cases(cveinfo_lst)

    print("done")
    print()
    return cveinfo_lst


def cause_plot(rev_diff_map):
    '''plot root causes'''

    print("analyze root causes:")
    labels = ['KACV-M', 'KACV-I', 'KACV-S']
    sizes = [len(rev_diff_map[1]), len(rev_diff_map[2]), len(rev_diff_map[3])]
    plt.figure(figsize=(7, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=False, startangle=90, colors = ["red", "orange", "green"] ,textprops={'fontsize': 17}, wedgeprops={'alpha':0.6})

    plt.axis('equal')
    plt.savefig('fig/study2.pdf')
    plt.clf()

    print("generate fig/study2.pdf")
    print("done")
    print()


def threat_plot(cveinfo_lst):
    '''analyze and plot security threats'''

    print("analyze security threats:")
    summary_classify(cveinfo_lst)

    print("generate fig/study4.pdf")
    print("done")
    print()


def load_cve_lst():
    '''load cve info from pickle file'''

    with open('data/cves.pickle', 'rb') as f:
        cve_lst = pickle.load(f)

    return cve_lst


def store_cve_lst(cve_lst):
    '''store cve info to pickle file'''

    with open('data/cves.pickle', 'wb') as f:
        pickle.dump(cve_lst, f)


if __name__ == "__main__":
    # Parse arguments
    parser = argparse.ArgumentParser(description='CVE Analysis for Kernel Acess Control Vulnerabilities')
    parser.add_argument('--cvesearch', dest='cvesearch', action='store_true', help='use cve-search tool to collect cve info (default: disabled)')
    parser.set_defaults(cvesearch=False)

    parser.add_argument('--exploits', dest='exploits', action='store_true', help='collect exploits (default: disabled)')
    parser.set_defaults(exploits=False)

    parser.add_argument('--subsystems', dest='subsystems', action='store_true', help='plot subsystems with KACVs (default: disabled)')
    parser.set_defaults(subsystem_plot=False)

    args = parser.parse_args()

    cveinfo_lst = None
    if args.cvesearch:
        # Collect cve info via cve-search tool
        print("collect cve info:")
        cveinfo_lst = collect_cve_info()

        print("done")
        print()

        store_cve_lst(cveinfo_lst)
    else:
        # Load cve info from a pickle file

        print("load cve info:")
        cveinfo_lst = load_cve_lst()
        print("done")
        print()

    if args.exploits:
        # Download exploits if available

        print("download exploits:")
        # if len(os.listdir(os.getcwd() + "/exploits/auto")) == 0:
        if not os.path.isdir(os.getcwd() + "/exploits/auto"):
            os.makedirs(os.getcwd() + "/exploits/auto")
        download_exploits(cveinfo_lst)
        
        print("done")
        print()


    # Analyze KACVs and plot figures


    if not os.path.isdir(os.getcwd() + "/fig"):
        os.makedirs(os.getcwd() + "/fig")

    year_plot(cveinfo_lst)

    m_i_cveinfo_lst, class_pie_map = diff_classify(cveinfo_lst)
    cause_plot(class_pie_map)

    severity_plot(m_i_cveinfo_lst)
    threat_plot(m_i_cveinfo_lst)

    if args.subsystems:
        subsystem_classify(m_i_cveinfo_lst)