#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" APIs for kernel version analysis """

import re
from const import *


ver_re_str = r"([1-5](\.\d+)+)"
ver_re = re.compile(ver_re_str)
def get_kv_from_str(s):
    '''get kernel version from a string'''
    match = ver_re.search(s)
    if match:
        e_lst = match.groups()
        # v = str(e_lst[0]).replace("x","1")
        return str(e_lst[0])
    return None


def get_kv_from_cveinfo(cve_info):
    '''get kernel version from cve info'''
    last_v = "1.0"
    for cfg in cve_info["vulnerable_configuration"]:
        if "o:linux:linux_kernel" in cfg:
            v = cfg.split(":")[5]

            m = {}
            match = ver_re.match(v)
            if match and vsmaller(last_v, v):
                last_v = v
    if last_v == "1.0":
        return None
    return last_v


path_re_str = r"(\w+(/[\w\.]+)+)"
path_re = re.compile(path_re_str)
def get_kfp_from_str(s):
    '''get kernel file path from a string'''
    m = {}
    match = path_re.search(s)
    if match:
        e_lst = match.groups()
        r = str(e_lst[0])

        dir_lst = list(os.listdir(kernel_path))
        if r.split("/")[0] in dir_lst:
            return [r]

        return get_kfp_from_str(s.replace(r, ""))
    return None


def vsmaller(x1, x2):
    '''version comparison'''
    assert(len(x1) > 0 and len(x2) > 0)
    v1 = get_kv_from_str(x1)
    v2 = get_kv_from_str(x2)
    
    if v1 == None or v2 == None:
        return False

    v1_lst = v1.split(".")
    v2_lst = v2.split(".")

    l = min(len(v1_lst), len(v2_lst))

    for i in range(l):
        v1_n = int(v1_lst[i])
        v2_n = int(v2_lst[i])
        if v1_n < v2_n:
            return True
        elif v1_n > v2_n:
            return False

    return len(v1_lst) <= len(v2_lst)


def get_oldest_cveinfo(cveinfo_lst):
    '''get the oldest kernel version'''
    print("search oldest kv:")
    oldest_cveinfo = None
    for cveinfo in cveinfo_lst:
        if cveinfo is None:
            continue

        if oldest_cveinfo is None:
            oldest_cveinfo = cveinfo
        elif vsmaller(cveinfo["kernel_version"], oldest_cveinfo["kernel_version"]):
            oldest_cveinfo = cveinfo

    print("kv="+oldest_cveinfo["kernel_version"], "commitid="+oldest_cveinfo["commitid"])
    print()
    return oldest_cveinfo 