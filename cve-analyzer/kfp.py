#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" APIs for kernel file path analysis """

import os
import re
from const import *
from gitif import *
from acfunc import *


def get_commitid(link):
    ''' get the commit hash tag '''
    return link.split("=")[-1]


def get_all_files(dir_path):
    ''' get all files in a directiry '''
    kfp_set = set()
    for file_name in os.listdir(dir_path):
        file_path = dir_path + "/" + file_name
        if os.path.isdir(file_path):
            one_kfp_set = get_all_files(file_path)
            kfp_set = kfp_set.union(one_kfp_set)
        elif os.path.isfile(file_path) and file_path[-2:] in [".c", ".h"]:
            kfp_set.add(file_path)
    return kfp_set


def get_kfp_lst_by_itr(dir_path):
    ''' get kernel file path list using acfun apis '''
    acfun_set = set()

    old_dir = os.getcwd()
    os.chdir(kernel_path)

    kfp_set = get_all_files(dir_path)
    for kfp in kfp_set:
        an_acfun_set = search_acfuns_by_keyword(kfp, None)
        acfun_set = acfun_set.union(an_acfun_set)

    os.chdir(old_dir)
    return acfun_set


def get_kfp_lst_by_find(word_lst):
    ''' get kernel file path list using the find tool '''
    kfp_lst = []

    old_dir = os.getcwd()
    os.chdir(kernel_path)

    for word in word_lst:
        find_c_cmd = "find . -name *" + word + "*.c > findc.txt"
        find_h_cmd = "find . -name *" + word + "*.h > findh.txt"

        os.system(find_c_cmd)
        os.system(find_h_cmd)

        with open("findc.txt", "r") as f:
            for line in f:
                line = line.strip()
                if len(line) == 0:
                    continue
                kfp_lst.append(line[2:])

        with open("findh.txt", "r") as f:
            for line in f:
                line = line.strip()
                if len(line) == 0:
                    continue
                kfp_lst.append(line[2:])
        os.remove("findc.txt")
        os.remove("findh.txt")
    kfp_lst = list(set(kfp_lst))

    acfun_set = set()
    for kfp in kfp_lst:
        acfun_subset = search_acfuns_by_keyword(kfp, None)
        acfun_set = acfun_set.union(acfun_subset)

    acfun_lst = list(acfun_set)
    os.chdir(old_dir)

    return acfun_lst


def get_kfp_lst_by_grep(grep_word_lst):
    ''' get kernel file path list using the grep tool '''
    acfun_dict = {}

    old_dir = os.getcwd()
    os.chdir(kernel_path)
    
    acfun_set = set()
    for word in grep_word_lst:
        grep_c_cmd = "grep -lr --include \"*.c\" \"" + word + "\" > grepc.txt"
        grep_h_cmd = "grep -lr --include \"*.h\" \"" + word + "\" > greph.txt"

        os.system(grep_c_cmd)
        os.system(grep_h_cmd)
        kfp_lst = []
        with open("grepc.txt", "r") as f:
            for line in f:
                line = line.strip()
                if len(line) == 0:
                    continue
                kfp_lst.append(line)

        with open("greph.txt", "r") as f:
            for line in f:
                line = line.strip()
                if len(line) == 0:
                    continue
                kfp_lst.append(line)
        os.remove("grepc.txt")
        os.remove("greph.txt")

        for kfp in kfp_lst:
            acfun_subset = search_acfuns_by_keyword(kfp, word)
            acfun_set = acfun_set.union(acfun_subset)

    acfun_lst = list(acfun_set)

    os.chdir(old_dir)

    return acfun_lst


def get_kfp_from_diff(diff):
    ''' get kernel file path list using git diff '''
    if diff is None:
        return None
    
    kfp_lst = []
    for fline in diff.split("\n"):
        ele_lst = fline.split()

        if len(ele_lst) == 0 or \
            len(ele_lst) != 4 or \
            ele_lst[0] != "diff":
            continue
            
        ne_lst = ele_lst[2].split("/")[1:]
        kfp_lst.append("/".join(ne_lst))
    return kfp_lst


def get_gen_kfp(kfp, gen_level=0):
    ele_lst = kfp.split("/")

    s = len(ele_lst)
    if s > gen_level and s >= 3:
        ele_lst = ele_lst[:s-gen_level]
    return "/".join(ele_lst)


def get_kfp_lst(commitid, to_file=False):
    ''' get kernel file path lst using multiple methods '''
    checkout(commitid)    

    for name, l in word_dict.items():
        gen_kfp_set = set()

        if name == "lsm_selinux":
            a_kfp_set = get_kfp_lst_by_itr("security/selinux")
            gen_kfp_set = gen_kfp_set.union(a_kfp_set)


        word_lst = l[0]
        find_lst = get_kfp_lst_by_find(word_lst)
        for kfp in find_lst:
            gen_kfp = get_gen_kfp(kfp)
            gen_kfp_set.add(gen_kfp)

        grep_word_lst = l[1]
        grep_lst = get_kfp_lst_by_grep(grep_word_lst)
        for kfp in grep_lst:
            gen_kfp = get_gen_kfp(kfp)
            gen_kfp_set.add(gen_kfp)

        gen_kfp_lst = sorted(list(gen_kfp_set))
        if to_file:
            with open("kfp/gen_kfp_lst-" + name + ".txt", "w") as f:
                for kfp in gen_kfp_lst:
                    f.write(kfp + "\n")

            print("kfp lst file for " + name + " generated\n")